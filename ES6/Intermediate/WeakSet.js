/**
 * WeakSet
 * Set에 객체를 저장할 경우 set에도 해당 객체에 대한 참조가 연결되어, 여타의 참조가 없어지더라도 set에는 객체가 여전히 살아있다
 * WeakSet은 객체에 대한 참조 카운트를 올리지 않아, 여타의 참조가 없어질 경우 WeakSet 내의 객체는 G.C의 대상이 된다.
 * 활용 사례는 아직까지는 많지 않다.
 */

// 참조 카운트를 증가시키지 않음
// const s = new WeakSet()
// let o ={} //o라는 변수가 {} 요런 객체를 참조 한다 -> 참조 카운트가 1이 되었어요
// let o2 = o; //o2라는 변수도 o를 통해서 {} 요 객체를 참조한다 -> 참조 카운트가 2가 되었어요
//
// // o2 = null;  //o2에 null이 들어가면서 -> {} 요 객체의 참조카운트는 1이 된다.
// // o = null; //{} reference count : 0 -> Garbage Collector의 수거 대상이 된다.
//
// s.add(o) //o라는 변수가 가리키는 {}를 s에 추가했지만, 참조 카운트는 여전히 1이다.
// o  = null
